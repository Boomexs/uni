diff --git a/Makefile b/Makefile
index 33a4039..fc2f559 100644
--- a/Makefile
+++ b/Makefile
@@ -171,7 +171,9 @@ mkfs: mkfs.c fs.h
 # 4.4 - add _testsyscall to UPROGS
 # 6.1 - add _testvm to UPROGS
 # 6.2 - add _testvinfo to UPROGS
+# 6.4 - add _testmmap to UPROGS
 # 7.1 - add _ps to UPROGS
+# 7.2 - add _testsched to UPROGS
 
 UPROGS=\
 	_cat\
@@ -195,6 +197,7 @@ UPROGS=\
 	_testvm\
 	_testvinfo\
 	_testmmap\
+	_testsched\
 	_ps\
 
 fs.img: mkfs README $(UPROGS)
@@ -267,12 +270,13 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # 6.1 - add testvm.c to EXTRA
 # 6.2 - add testvinfo.c to EXTRA
 # 7.1 - add ps.c to EXTRA
+# 7.2 - add testsched.c to EXTRA
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c expr.c hello.c testsyscall.c testvm.c testvinfo.c\
-	testmmap.c ps.c\
+	testmmap.c ps.c testsched.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/proc.c b/proc.c
index e6f846b..e3db6ff 100644
--- a/proc.c
+++ b/proc.c
@@ -95,6 +95,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->priority = 100; // 7.2 set default priority to 100
 
   release(&ptable.lock);
 
@@ -331,10 +332,14 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+
+// 7.2 modify scheduler proc->priority based round robin
+// I used Fixed-priority preemptive scheduling https://en.wikipedia.org/wiki/Fixed-priority_pre-emptive_scheduling
 void
 scheduler(void)
 {
   struct proc *p;
+  struct proc *p1;
   struct cpu *c = mycpu();
   c->proc = 0;
   
@@ -344,17 +349,32 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
+    struct proc *highestPriorityProc = 0;
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      highestPriorityProc = p;
+
+      for (p1=ptable.proc; p1 < &ptable.proc[NPROC]; p1++) {
+        if (p1->state != RUNNABLE) {
+          continue;
+        }
+        if (p1->priority > highestPriorityProc->priority) {
+          highestPriorityProc = p1;
+        }
+      }
+
+      p = highestPriorityProc;
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
diff --git a/proc.h b/proc.h
index f4c7e03..a9475f2 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  // 7.2 add priority
+  int priority;                // 1000 is the highest priority
 };
 
 // 7.1 add uproc
diff --git a/syscall.c b/syscall.c
index 31e6119..4e0215c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -115,6 +115,9 @@ extern int sys_mmap(void);
 extern int sys_getnumproc(void);
 extern int sys_getmaxpid(void);
 extern int sys_getprocinfo(void);
+// 7.2 add an extern syscall function
+extern int sys_setprio(void);
+extern int sys_getprio(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -150,6 +153,9 @@ static int (*syscalls[])(void) = {
 [SYS_getnumproc] sys_getnumproc,
 [SYS_getmaxpid] sys_getmaxpid,
 [SYS_getprocinfo] sys_getprocinfo,
+// 7.2 add a syscall into the syscall table
+[SYS_setprio] sys_setprio,
+[SYS_getprio] sys_getprio,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6525bb6..0f04ce3 100644
--- a/syscall.h
+++ b/syscall.h
@@ -35,4 +35,8 @@
 // 7.1 add a syscall
 #define SYS_getnumproc 27
 #define SYS_getmaxpid 28
-#define SYS_getprocinfo 29
\ No newline at end of file
+#define SYS_getprocinfo 29
+
+// 7.2 add a syscall
+#define SYS_setprio 30
+#define SYS_getprio 31
\ No newline at end of file
diff --git a/sysfile.c b/sysfile.c
index 822ccfe..741320f 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -618,4 +618,32 @@ int sys_getprocinfo(void)
       return 0;
     }
   }
+}
+
+// 7.2 add sys_setprio
+int sys_setprio(void) {
+  struct proc *curproc = myproc();
+
+  int prio;
+
+  if (argint(0, &prio) < 0)
+  {
+    return -1;
+  }
+
+  if (prio < 0 || prio > 1000)
+  {
+    return -1;
+  }
+
+  curproc->priority = prio;
+
+  return 0;
+}
+
+// 7.2 add sys_getprio
+int sys_getprio(void) {
+  struct proc *curproc = myproc();
+
+  return curproc->priority;
 }
\ No newline at end of file
diff --git a/testsched.c b/testsched.c
new file mode 100644
index 0000000..ec3cd2d
--- /dev/null
+++ b/testsched.c
@@ -0,0 +1,58 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+void child_func()
+{
+    sleep(1000);
+}
+
+void quick_child_func()
+{
+    sleep(10);
+}
+
+void create_child(int id, int priority, void (*func)(), char* name)
+{
+    int pid = fork();
+    if (pid < 0)
+    {
+        printf(1, "Fork failed\n");
+        exit();
+    }
+    else if (pid == 0)
+    {
+        setprio(priority);
+        func();
+        printf(1, "Child (id=%d, prio=%d, task='%s') process has finished\n", id, getprio(), name);
+        exit();
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    printf(1, "testsched starting\n");
+    printf(1, "priority in [0,1000], higher value ~ more cpu time\n");
+
+    // higher priority the better
+    create_child(1, 100, child_func, "long");
+    create_child(2, 300, child_func, "long");
+    create_child(3, 500, child_func, "long");
+    create_child(4, 150, child_func, "long");
+    create_child(5, 200, child_func, "long");
+    create_child(6, 99, quick_child_func, "short");
+    create_child(7, 99, quick_child_func, "short");
+    create_child(8, 99, quick_child_func, "short");
+
+    // expected outcome
+    // In the following order: 3, 2, 5, 4, 1 
+    // Afterwards in any order: 6, 7, 8 (order of creation determines order of execution)
+
+    for (int i = 0; i < 8; i++)
+    {
+        wait();
+    }
+
+    printf(1, "testsched done.\n");
+    exit();
+}
diff --git a/user.h b/user.h
index 23b7575..fd6f50a 100644
--- a/user.h
+++ b/user.h
@@ -39,10 +39,13 @@ int usedvp(void);
 int usedpp(void);
 // 6.3 add mmap(int) syscall declaration
 int mmap(int size);
-// 7.1 add  syscall declaration
+// 7.1 add syscall declaration
 int getnumproc(void);
 int getmaxpid(void);
 int getprocinfo(int pid, struct uproc* info);
+// 7.2 add setprio(int) and getprio() syscall declarations
+int setprio(int prio);
+int getprio(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8263457..1167089 100644
--- a/usys.S
+++ b/usys.S
@@ -40,4 +40,7 @@ SYSCALL(mmap)
 // 7.1 add syscall extern declaration
 SYSCALL(getnumproc)
 SYSCALL(getmaxpid)
-SYSCALL(getprocinfo)
\ No newline at end of file
+SYSCALL(getprocinfo)
+// 7.2 add syscall extern declaration
+SYSCALL(setprio)
+SYSCALL(getprio)
\ No newline at end of file
diff --git a/vm.c b/vm.c
index d788e36..f3ba0f6 100644
--- a/vm.c
+++ b/vm.c
@@ -7,13 +7,12 @@
 #include "proc.h"
 #include "elf.h"
 
-extern char data[];  // defined by kernel.ld
-pde_t *kpgdir;  // for use in scheduler()
+extern char data[]; // defined by kernel.ld
+pde_t *kpgdir;      // for use in scheduler()
 
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
-void
-seginit(void)
+void seginit(void)
 {
   struct cpu *c;
 
@@ -22,9 +21,9 @@ seginit(void)
   // because it would have to have DPL_USR, but the CPU forbids
   // an interrupt from CPL=0 to DPL=3.
   c = &cpus[cpuid()];
-  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+  c->gdt[SEG_KCODE] = SEG(STA_X | STA_R, 0, 0xffffffff, 0);
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+  c->gdt[SEG_UCODE] = SEG(STA_X | STA_R, 0, 0xffffffff, DPL_USER);
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
   lgdt(c->gdt, sizeof(c->gdt));
 }
@@ -41,10 +40,13 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-  if(*pde & PTE_P){
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-  } else {
-    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+  if (*pde & PTE_P)
+  {
+    pgtab = (pte_t *)P2V(PTE_ADDR(*pde));
+  }
+  else
+  {
+    if (!alloc || (pgtab = (pte_t *)kalloc()) == 0)
       return 0;
     // Make sure all those PTE_P bits are zero.
     memset(pgtab, 0, PGSIZE);
@@ -65,15 +67,16 @@ mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
   char *a, *last;
   pte_t *pte;
 
-  a = (char*)PGROUNDDOWN((uint)va);
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-  for(;;){
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+  a = (char *)PGROUNDDOWN((uint)va);
+  last = (char *)PGROUNDDOWN(((uint)va) + size - 1);
+  for (;;)
+  {
+    if ((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
-    if(*pte & PTE_P)
+    if (*pte & PTE_P)
       panic("remap");
     *pte = pa | perm | PTE_P;
-    if(a == last)
+    if (a == last)
       break;
     a += PGSIZE;
     pa += PGSIZE;
@@ -104,33 +107,35 @@ mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 
 // This table defines the kernel's mappings, which are present in
 // every process's page table.
-static struct kmap {
+static struct kmap
+{
   void *virt;
   uint phys_start;
   uint phys_end;
   int perm;
 } kmap[] = {
- { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, // I/O space
- { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     // kern text+rodata
- { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, // kern data+memory
- { (void*)DEVSPACE, DEVSPACE,      0,         PTE_W}, // more devices
+    {(void *)KERNBASE, 0, EXTMEM, PTE_W},            // I/O space
+    {(void *)KERNLINK, V2P(KERNLINK), V2P(data), 0}, // kern text+rodata
+    {(void *)data, V2P(data), PHYSTOP, PTE_W},       // kern data+memory
+    {(void *)DEVSPACE, DEVSPACE, 0, PTE_W},          // more devices
 };
 
 // Set up kernel part of a page table.
-pde_t*
+pde_t *
 setupkvm(void)
 {
   pde_t *pgdir;
   struct kmap *k;
 
-  if((pgdir = (pde_t*)kalloc()) == 0)
+  if ((pgdir = (pde_t *)kalloc()) == 0)
     return 0;
   memset(pgdir, 0, PGSIZE);
-  if (P2V(PHYSTOP) > (void*)DEVSPACE)
+  if (P2V(PHYSTOP) > (void *)DEVSPACE)
     panic("PHYSTOP too high");
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-                (uint)k->phys_start, k->perm) < 0) {
+  for (k = kmap; k < &kmap[NELEM(kmap)]; k++)
+    if (mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+                 (uint)k->phys_start, k->perm) < 0)
+    {
       freevm(pgdir);
       return 0;
     }
@@ -139,8 +144,7 @@ setupkvm(void)
 
 // Allocate one page table for the machine for the kernel address
 // space for scheduler processes.
-void
-kvmalloc(void)
+void kvmalloc(void)
 {
   kpgdir = setupkvm();
   switchkvm();
@@ -148,71 +152,68 @@ kvmalloc(void)
 
 // Switch h/w page table register to the kernel-only page table,
 // for when no process is running.
-void
-switchkvm(void)
+void switchkvm(void)
 {
-  lcr3(V2P(kpgdir));   // switch to the kernel page table
+  lcr3(V2P(kpgdir)); // switch to the kernel page table
 }
 
 // Switch TSS and h/w page table to correspond to process p.
-void
-switchuvm(struct proc *p)
+void switchuvm(struct proc *p)
 {
-  if(p == 0)
+  if (p == 0)
     panic("switchuvm: no process");
-  if(p->kstack == 0)
+  if (p->kstack == 0)
     panic("switchuvm: no kstack");
-  if(p->pgdir == 0)
+  if (p->pgdir == 0)
     panic("switchuvm: no pgdir");
 
   pushcli();
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-                                sizeof(mycpu()->ts)-1, 0);
+                                sizeof(mycpu()->ts) - 1, 0);
   mycpu()->gdt[SEG_TSS].s = 0;
   mycpu()->ts.ss0 = SEG_KDATA << 3;
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
   // setting IOPL=0 in eflags *and* iomb beyond the tss segment limit
   // forbids I/O instructions (e.g., inb and outb) from user space
-  mycpu()->ts.iomb = (ushort) 0xFFFF;
+  mycpu()->ts.iomb = (ushort)0xFFFF;
   ltr(SEG_TSS << 3);
-  lcr3(V2P(p->pgdir));  // switch to process's address space
+  lcr3(V2P(p->pgdir)); // switch to process's address space
   popcli();
 }
 
 // Load the initcode into address 0 of pgdir.
 // sz must be less than a page.
-void
-inituvm(pde_t *pgdir, char *init, uint sz)
+void inituvm(pde_t *pgdir, char *init, uint sz)
 {
   char *mem;
 
-  if(sz >= PGSIZE)
+  if (sz >= PGSIZE)
     panic("inituvm: more than a page");
   mem = kalloc();
   memset(mem, 0, PGSIZE);
-  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W | PTE_U);
   memmove(mem, init, sz);
 }
 
 // Load a program segment into pgdir.  addr must be page-aligned
 // and the pages from addr to addr+sz must already be mapped.
-int
-loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
+int loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
 {
   uint i, pa, n;
   pte_t *pte;
 
-  if((uint) addr % PGSIZE != 0)
+  if ((uint)addr % PGSIZE != 0)
     panic("loaduvm: addr must be page aligned");
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+  for (i = 0; i < sz; i += PGSIZE)
+  {
+    if ((pte = walkpgdir(pgdir, addr + i, 0)) == 0)
       panic("loaduvm: address should exist");
     pa = PTE_ADDR(*pte);
-    if(sz - i < PGSIZE)
+    if (sz - i < PGSIZE)
       n = sz - i;
     else
       n = PGSIZE;
-    if(readi(ip, P2V(pa), offset+i, n) != n)
+    if (readi(ip, P2V(pa), offset + i, n) != n)
       return -1;
   }
   return 0;
@@ -220,27 +221,29 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
 
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
-int
-allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+int allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
   char *mem;
   uint a;
 
-  if(newsz >= KERNBASE)
-    return 0; 
-  if(newsz < oldsz)
+  if (newsz >= KERNBASE)
+    return 0;
+  if (newsz < oldsz)
     return oldsz;
 
   a = PGROUNDUP(oldsz);
-  for(; a < newsz; a += PGSIZE){
+  for (; a < newsz; a += PGSIZE)
+  {
     mem = kalloc();
-    if(mem == 0){
+    if (mem == 0)
+    {
       cprintf("allocuvm out of memory\n");
       deallocuvm(pgdir, newsz, oldsz);
       return 0;
     }
     memset(mem, 0, PGSIZE);
-    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+    if (mappages(pgdir, (char *)a, PGSIZE, V2P(mem), PTE_W | PTE_U) < 0)
+    {
       cprintf("allocuvm out of memory (2)\n");
       deallocuvm(pgdir, newsz, oldsz);
       kfree(mem);
@@ -254,23 +257,24 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
-int
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+int deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
   pte_t *pte;
   uint a, pa;
 
-  if(newsz >= oldsz)
+  if (newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-  for(; a  < oldsz; a += PGSIZE){
-    pte = walkpgdir(pgdir, (char*)a, 0);
-    if(!pte)
+  for (; a < oldsz; a += PGSIZE)
+  {
+    pte = walkpgdir(pgdir, (char *)a, 0);
+    if (!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-    else if((*pte & PTE_P) != 0){
+    else if ((*pte & PTE_P) != 0)
+    {
       pa = PTE_ADDR(*pte);
-      if(pa == 0)
+      if (pa == 0)
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
@@ -282,39 +286,39 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 
 // Free a page table and all the physical memory pages
 // in the user part.
-void
-freevm(pde_t *pgdir)
+void freevm(pde_t *pgdir)
 {
   uint i;
 
-  if(pgdir == 0)
+  if (pgdir == 0)
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
-    if(pgdir[i] & PTE_P){
-      char * v = P2V(PTE_ADDR(pgdir[i]));
+  for (i = 0; i < NPDENTRIES; i++)
+  {
+    if (pgdir[i] & PTE_P)
+    {
+      char *v = P2V(PTE_ADDR(pgdir[i]));
       kfree(v);
     }
   }
-  kfree((char*)pgdir);
+  kfree((char *)pgdir);
 }
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
-void
-clearpteu(pde_t *pgdir, char *uva)
+void clearpteu(pde_t *pgdir, char *uva)
 {
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-  if(pte == 0)
+  if (pte == 0)
     panic("clearpteu");
   *pte &= ~PTE_U;
 }
 
 // Given a parent process's page table, create a copy
 // of it for a child.
-pde_t*
+pde_t *
 copyuvm(pde_t *pgdir, uint sz)
 {
   pde_t *d;
@@ -322,19 +326,21 @@ copyuvm(pde_t *pgdir, uint sz)
   uint pa, i, flags;
   char *mem;
 
-  if((d = setupkvm()) == 0)
+  if ((d = setupkvm()) == 0)
     return 0;
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+  for (i = 0; i < sz; i += PGSIZE)
+  {
+    if ((pte = walkpgdir(pgdir, (void *)i, 0)) == 0)
       panic("copyuvm: pte should exist");
-    if(!(*pte & PTE_P))
+    if (!(*pte & PTE_P))
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    if ((mem = kalloc()) == 0)
       goto bad;
-    memmove(mem, (char*)P2V(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+    memmove(mem, (char *)P2V(pa), PGSIZE);
+    if (mappages(d, (void *)i, PGSIZE, V2P(mem), flags) < 0)
+    {
       kfree(mem);
       goto bad;
     }
@@ -346,38 +352,38 @@ bad:
   return 0;
 }
 
-//PAGEBREAK!
-// Map user virtual address to kernel address.
-char*
+// PAGEBREAK!
+//  Map user virtual address to kernel address.
+char *
 uva2ka(pde_t *pgdir, char *uva)
 {
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-  if((*pte & PTE_P) == 0)
+  if ((*pte & PTE_P) == 0)
     return 0;
-  if((*pte & PTE_U) == 0)
+  if ((*pte & PTE_U) == 0)
     return 0;
-  return (char*)P2V(PTE_ADDR(*pte));
+  return (char *)P2V(PTE_ADDR(*pte));
 }
 
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
-int
-copyout(pde_t *pgdir, uint va, void *p, uint len)
+int copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
   char *buf, *pa0;
   uint n, va0;
 
-  buf = (char*)p;
-  while(len > 0){
+  buf = (char *)p;
+  while (len > 0)
+  {
     va0 = (uint)PGROUNDDOWN(va);
-    pa0 = uva2ka(pgdir, (char*)va0);
-    if(pa0 == 0)
+    pa0 = uva2ka(pgdir, (char *)va0);
+    if (pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-    if(n > len)
+    if (n > len)
       n = len;
     memmove(pa0 + (va - va0), buf, n);
     len -= n;
@@ -387,24 +393,24 @@ copyout(pde_t *pgdir, uint va, void *p, uint len)
   return 0;
 }
 
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-
+// PAGEBREAK!
+//  Blank page.
+// PAGEBREAK!
+//  Blank page.
+// PAGEBREAK!
+//  Blank page.
 
 // 6.1 add vmprint defintion
-void vmprint(pde_t *pgdir) {
+void vmprint(pde_t *pgdir)
+{
   cprintf("pgdir %p\n", pgdir);
 
-  for (int i = 0; i < 512; i++) 
-    if (pgdir[i] & PTE_P) { 
+  for (int i = 0; i < 512; i++)
+    if (pgdir[i] & PTE_P) {
       uint pa = PTE_ADDR(pgdir[i]);
       cprintf(".. %d: pde 0x%x pa 0x%x\n", i, PTE_ADDR(pgdir[i]), V2P(pa));
 
-      pte_t* pt = (pte_t*)P2V(pa); 
+      pte_t* pt = (pte_t*)P2V(pa);
       for (int j = 0; j < 1024; j++) {
           if (pt[j] & PTE_P) {
               uint pte_pa = PTE_ADDR(pt[j]);
