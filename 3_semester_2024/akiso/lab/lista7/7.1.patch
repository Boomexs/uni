diff --git a/Makefile b/Makefile
index f35a405..33a4039 100644
--- a/Makefile
+++ b/Makefile
@@ -171,6 +171,7 @@ mkfs: mkfs.c fs.h
 # 4.4 - add _testsyscall to UPROGS
 # 6.1 - add _testvm to UPROGS
 # 6.2 - add _testvinfo to UPROGS
+# 7.1 - add _ps to UPROGS
 
 UPROGS=\
 	_cat\
@@ -194,6 +195,7 @@ UPROGS=\
 	_testvm\
 	_testvinfo\
 	_testmmap\
+	_ps\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -264,12 +266,13 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # 4.6 - add testsyscall.c to EXTRA
 # 6.1 - add testvm.c to EXTRA
 # 6.2 - add testvinfo.c to EXTRA
+# 7.1 - add ps.c to EXTRA
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c expr.c hello.c testsyscall.c testvm.c testvinfo.c\
-	testmmap.c\
+	testmmap.c ps.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index b3025ed..fa9837e 100644
--- a/defs.h
+++ b/defs.h
@@ -10,6 +10,8 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+struct ptable; // 7.1 add ptable def
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -120,6 +122,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+struct ptable*  getptable(void); // 7.1 add getptable def
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index ed0b52c..e6f846b 100644
--- a/proc.c
+++ b/proc.c
@@ -7,7 +7,7 @@
 #include "proc.h"
 #include "spinlock.h"
 
-struct {
+struct ptable {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
@@ -20,6 +20,13 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
+// 7.1 getptable
+struct ptable* getptable(void)
+{
+  return &ptable;
+}
+
+
 void
 pinit(void)
 {
diff --git a/proc.h b/proc.h
index 1647114..f4c7e03 100644
--- a/proc.h
+++ b/proc.h
@@ -51,6 +51,15 @@ struct proc {
   char name[16];               // Process name (debugging)
 };
 
+// 7.1 add uproc
+struct uproc {
+    int pid;
+    int ppid;
+    int sz;
+    int state;
+    char name[16];
+};
+
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..9d70931
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,24 @@
+// 7.1 add ps.c
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[])
+{
+    printf(1, "Process Status\n");
+
+    int np = getnumproc();
+    printf(1, "NumProc %d", np);
+
+    int max = getmaxpid();
+    printf(1, " MaxPID %d\n", max);
+
+    for (int i = 1; i <= max; i++) {
+        struct uproc p;
+        if (getprocinfo(i, &p) == 0) {
+            printf(1, "PID: %d, PPID: %d, Size: %d, State: %d, Name: %s\n", p.pid, p.ppid, p.sz, p.state, p.name);
+        }
+    }
+
+    exit();
+}
diff --git a/syscall.c b/syscall.c
index 0166b6f..31e6119 100644
--- a/syscall.c
+++ b/syscall.c
@@ -111,6 +111,10 @@ extern int sys_usedvp(void);
 extern int sys_usedpp(void);
 // 6.3 add an extern syscall function
 extern int sys_mmap(void);
+// 7.1 add an extern syscall function
+extern int sys_getnumproc(void);
+extern int sys_getmaxpid(void);
+extern int sys_getprocinfo(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -142,6 +146,10 @@ static int (*syscalls[])(void) = {
 [SYS_usedpp]  sys_usedpp,
 // 6.3 add a mmap syscall into the syscall table
 [SYS_mmap]    sys_mmap,
+// 7.1 add a syscall into the syscall table
+[SYS_getnumproc] sys_getnumproc,
+[SYS_getmaxpid] sys_getmaxpid,
+[SYS_getprocinfo] sys_getprocinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index d670a06..6525bb6 100644
--- a/syscall.h
+++ b/syscall.h
@@ -30,4 +30,9 @@
 #define SYS_usedpp 25
 
 // 6.3 add a syscall
-#define SYS_mmap 26
\ No newline at end of file
+#define SYS_mmap 26
+
+// 7.1 add a syscall
+#define SYS_getnumproc 27
+#define SYS_getmaxpid 28
+#define SYS_getprocinfo 29
\ No newline at end of file
diff --git a/sysfile.c b/sysfile.c
index bc7e201..822ccfe 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -25,13 +25,13 @@ argfd(int n, int *pfd, struct file **pf)
   int fd;
   struct file *f;
 
-  if(argint(n, &fd) < 0)
+  if (argint(n, &fd) < 0)
     return -1;
-  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+  if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
     return -1;
-  if(pfd)
+  if (pfd)
     *pfd = fd;
-  if(pf)
+  if (pf)
     *pf = f;
   return 0;
 }
@@ -44,8 +44,10 @@ fdalloc(struct file *f)
   int fd;
   struct proc *curproc = myproc();
 
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd] == 0){
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd] == 0)
+    {
       curproc->ofile[fd] = f;
       return fd;
     }
@@ -53,86 +55,82 @@ fdalloc(struct file *f)
   return -1;
 }
 
-int
-sys_dup(void)
+int sys_dup(void)
 {
   struct file *f;
   int fd;
 
-  if(argfd(0, 0, &f) < 0)
+  if (argfd(0, 0, &f) < 0)
     return -1;
-  if((fd=fdalloc(f)) < 0)
+  if ((fd = fdalloc(f)) < 0)
     return -1;
   filedup(f);
   return fd;
 }
 
-int
-sys_read(void)
+int sys_read(void)
 {
   struct file *f;
   int n;
   char *p;
 
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
     return -1;
   return fileread(f, p, n);
 }
 
-int
-sys_write(void)
+int sys_write(void)
 {
   struct file *f;
   int n;
   char *p;
 
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
     return -1;
   return filewrite(f, p, n);
 }
 
-int
-sys_close(void)
+int sys_close(void)
 {
   int fd;
   struct file *f;
 
-  if(argfd(0, &fd, &f) < 0)
+  if (argfd(0, &fd, &f) < 0)
     return -1;
   myproc()->ofile[fd] = 0;
   fileclose(f);
   return 0;
 }
 
-int
-sys_fstat(void)
+int sys_fstat(void)
 {
   struct file *f;
   struct stat *st;
 
-  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+  if (argfd(0, 0, &f) < 0 || argptr(1, (void *)&st, sizeof(*st)) < 0)
     return -1;
   return filestat(f, st);
 }
 
 // Create the path new as a link to the same inode as old.
-int
-sys_link(void)
+int sys_link(void)
 {
   char name[DIRSIZ], *new, *old;
   struct inode *dp, *ip;
 
-  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+  if (argstr(0, &old) < 0 || argstr(1, &new) < 0)
     return -1;
 
   begin_op();
-  if((ip = namei(old)) == 0){
+  if ((ip = namei(old)) == 0)
+  {
     end_op();
     return -1;
   }
 
   ilock(ip);
-  if(ip->type == T_DIR){
+  if (ip->type == T_DIR)
+  {
     iunlockput(ip);
     end_op();
     return -1;
@@ -142,10 +140,11 @@ sys_link(void)
   iupdate(ip);
   iunlock(ip);
 
-  if((dp = nameiparent(new, name)) == 0)
+  if ((dp = nameiparent(new, name)) == 0)
     goto bad;
   ilock(dp);
-  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+  if (dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0)
+  {
     iunlockput(dp);
     goto bad;
   }
@@ -172,29 +171,30 @@ isdirempty(struct inode *dp)
   int off;
   struct dirent de;
 
-  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+  for (off = 2 * sizeof(de); off < dp->size; off += sizeof(de))
+  {
+    if (readi(dp, (char *)&de, off, sizeof(de)) != sizeof(de))
       panic("isdirempty: readi");
-    if(de.inum != 0)
+    if (de.inum != 0)
       return 0;
   }
   return 1;
 }
 
-//PAGEBREAK!
-int
-sys_unlink(void)
+// PAGEBREAK!
+int sys_unlink(void)
 {
   struct inode *ip, *dp;
   struct dirent de;
   char name[DIRSIZ], *path;
   uint off;
 
-  if(argstr(0, &path) < 0)
+  if (argstr(0, &path) < 0)
     return -1;
 
   begin_op();
-  if((dp = nameiparent(path, name)) == 0){
+  if ((dp = nameiparent(path, name)) == 0)
+  {
     end_op();
     return -1;
   }
@@ -202,24 +202,26 @@ sys_unlink(void)
   ilock(dp);
 
   // Cannot unlink "." or "..".
-  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+  if (namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
     goto bad;
 
-  if((ip = dirlookup(dp, name, &off)) == 0)
+  if ((ip = dirlookup(dp, name, &off)) == 0)
     goto bad;
   ilock(ip);
 
-  if(ip->nlink < 1)
+  if (ip->nlink < 1)
     panic("unlink: nlink < 1");
-  if(ip->type == T_DIR && !isdirempty(ip)){
+  if (ip->type == T_DIR && !isdirempty(ip))
+  {
     iunlockput(ip);
     goto bad;
   }
 
   memset(&de, 0, sizeof(de));
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+  if (writei(dp, (char *)&de, off, sizeof(de)) != sizeof(de))
     panic("unlink: writei");
-  if(ip->type == T_DIR){
+  if (ip->type == T_DIR)
+  {
     dp->nlink--;
     iupdate(dp);
   }
@@ -239,26 +241,27 @@ bad:
   return -1;
 }
 
-static struct inode*
+static struct inode *
 create(char *path, short type, short major, short minor)
 {
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
-  if((dp = nameiparent(path, name)) == 0)
+  if ((dp = nameiparent(path, name)) == 0)
     return 0;
   ilock(dp);
 
-  if((ip = dirlookup(dp, name, 0)) != 0){
+  if ((ip = dirlookup(dp, name, 0)) != 0)
+  {
     iunlockput(dp);
     ilock(ip);
-    if(type == T_FILE && ip->type == T_FILE)
+    if (type == T_FILE && ip->type == T_FILE)
       return ip;
     iunlockput(ip);
     return 0;
   }
 
-  if((ip = ialloc(dp->dev, type)) == 0)
+  if ((ip = ialloc(dp->dev, type)) == 0)
     panic("create: ialloc");
 
   ilock(ip);
@@ -267,15 +270,16 @@ create(char *path, short type, short major, short minor)
   ip->nlink = 1;
   iupdate(ip);
 
-  if(type == T_DIR){  // Create . and .. entries.
-    dp->nlink++;  // for ".."
+  if (type == T_DIR)
+  {              // Create . and .. entries.
+    dp->nlink++; // for ".."
     iupdate(dp);
     // No ip->nlink++ for ".": avoid cyclic ref count.
-    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+    if (dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
       panic("create dots");
   }
 
-  if(dirlink(dp, name, ip->inum) < 0)
+  if (dirlink(dp, name, ip->inum) < 0)
     panic("create: dirlink");
 
   iunlockput(dp);
@@ -283,40 +287,46 @@ create(char *path, short type, short major, short minor)
   return ip;
 }
 
-int
-sys_open(void)
+int sys_open(void)
 {
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
-  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+  if (argstr(0, &path) < 0 || argint(1, &omode) < 0)
     return -1;
 
   begin_op();
 
-  if(omode & O_CREATE){
+  if (omode & O_CREATE)
+  {
     ip = create(path, T_FILE, 0, 0);
-    if(ip == 0){
+    if (ip == 0)
+    {
       end_op();
       return -1;
     }
-  } else {
-    if((ip = namei(path)) == 0){
+  }
+  else
+  {
+    if ((ip = namei(path)) == 0)
+    {
       end_op();
       return -1;
     }
     ilock(ip);
-    if(ip->type == T_DIR && omode != O_RDONLY){
+    if (ip->type == T_DIR && omode != O_RDONLY)
+    {
       iunlockput(ip);
       end_op();
       return -1;
     }
   }
 
-  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-    if(f)
+  if ((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0)
+  {
+    if (f)
       fileclose(f);
     iunlockput(ip);
     end_op();
@@ -333,14 +343,14 @@ sys_open(void)
   return fd;
 }
 
-int
-sys_mkdir(void)
+int sys_mkdir(void)
 {
   char *path;
   struct inode *ip;
 
   begin_op();
-  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+  if (argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0)
+  {
     end_op();
     return -1;
   }
@@ -349,18 +359,18 @@ sys_mkdir(void)
   return 0;
 }
 
-int
-sys_mknod(void)
+int sys_mknod(void)
 {
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-  if((argstr(0, &path)) < 0 ||
-     argint(1, &major) < 0 ||
-     argint(2, &minor) < 0 ||
-     (ip = create(path, T_DEV, major, minor)) == 0){
+  if ((argstr(0, &path)) < 0 ||
+      argint(1, &major) < 0 ||
+      argint(2, &minor) < 0 ||
+      (ip = create(path, T_DEV, major, minor)) == 0)
+  {
     end_op();
     return -1;
   }
@@ -369,20 +379,21 @@ sys_mknod(void)
   return 0;
 }
 
-int
-sys_chdir(void)
+int sys_chdir(void)
 {
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-  
+
   begin_op();
-  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+  if (argstr(0, &path) < 0 || (ip = namei(path)) == 0)
+  {
     end_op();
     return -1;
   }
   ilock(ip);
-  if(ip->type != T_DIR){
+  if (ip->type != T_DIR)
+  {
     iunlockput(ip);
     end_op();
     return -1;
@@ -394,46 +405,48 @@ sys_chdir(void)
   return 0;
 }
 
-int
-sys_exec(void)
+int sys_exec(void)
 {
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+  if (argstr(0, &path) < 0 || argint(1, (int *)&uargv) < 0)
+  {
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-  for(i=0;; i++){
-    if(i >= NELEM(argv))
+  for (i = 0;; i++)
+  {
+    if (i >= NELEM(argv))
       return -1;
-    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+    if (fetchint(uargv + 4 * i, (int *)&uarg) < 0)
       return -1;
-    if(uarg == 0){
+    if (uarg == 0)
+    {
       argv[i] = 0;
       break;
     }
-    if(fetchstr(uarg, &argv[i]) < 0)
+    if (fetchstr(uarg, &argv[i]) < 0)
       return -1;
   }
   return exec(path, argv);
 }
 
-int
-sys_pipe(void)
+int sys_pipe(void)
 {
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
-  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+  if (argptr(0, (void *)&fd, 2 * sizeof(fd[0])) < 0)
     return -1;
-  if(pipealloc(&rf, &wf) < 0)
+  if (pipealloc(&rf, &wf) < 0)
     return -1;
   fd0 = -1;
-  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-    if(fd0 >= 0)
+  if ((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0)
+  {
+    if (fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
     fileclose(wf);
@@ -475,10 +488,12 @@ int sys_usedpp(void)
   uint num_pages = 0;
   uint va = 0;
 
-  for (va = 0; va < curproc->sz; va+= PGSIZE) {
+  for (va = 0; va < curproc->sz; va += PGSIZE)
+  {
     pgtab = walkpgdir(pgdir, (void *)va, 0);
     // exists and mapped
-    if (pgtab && (*pgtab & PTE_P)) {
+    if (pgtab && (*pgtab & PTE_P))
+    {
       num_pages++;
     }
   }
@@ -487,25 +502,120 @@ int sys_usedpp(void)
 }
 
 // 6.3 add a syscall mmap
-int sys_mmap(void) 
+int sys_mmap(void)
 {
   int size;
 
   // must be an integer
-  if(argint(0, (int*)&size) < 0){
+  if (argint(0, (int *)&size) < 0)
+  {
     return -1;
   }
 
   // must be a multiple of a page
-  if (size > 0 && size % PGSIZE != 0) {
+  if (size > 0 && size % PGSIZE != 0)
+  {
     return -1;
   }
 
   // grow virtual memory size
   struct proc *curproc = myproc();
   curproc->sz += size;
-  
+
   switchuvm(curproc);
 
   return curproc->sz - size;
+}
+
+extern struct
+{
+  struct spinlock lock;
+  struct proc proc[NPROC];
+} ptable;
+
+// 7.1 add a syscall getnumproc
+int sys_getnumproc(void)
+{
+  int num_proc = 0;
+  struct proc *p;
+
+  if (!holding(&ptable.lock)) {
+    acquire(&ptable.lock);
+  }
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    // knowing procstate data structure we infer
+    // EMBRYO, RUNNING, RUNNABLE, SLEEPING, ZOMBIE = not (UNUSED)
+    if (p->state != UNUSED)
+    {
+      num_proc++;
+    }
+  }
+
+  release(&ptable.lock);
+
+  return num_proc;
+}
+
+// 7.1 add a syscall getmaxpid
+int sys_getmaxpid(void)
+{
+  int max_pid = 0;
+  struct proc *p;
+
+  if (!holding(&ptable.lock)) {
+    acquire(&ptable.lock);
+  }
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid > max_pid)
+    {
+      max_pid = p->pid;
+    }
+  }
+
+  release(&ptable.lock);
+
+  return max_pid;
+}
+
+// 7.1 add a syscall getprocinfo
+int sys_getprocinfo(void)
+{
+  // int getprocinfo(int pid, struct proc* info);
+  int pid;
+  struct proc *proc;
+  struct uproc *p;
+
+  if (argint(0, &pid) < 0 || argptr(1, (void *)&p, sizeof(*p)) < 0)
+  {
+    return -1;
+  }
+
+  if (!holding(&ptable.lock)) {
+    acquire(&ptable.lock);
+  }
+
+  for (proc = ptable.proc; proc < &ptable.proc[NPROC]; proc++)
+  {
+    if (proc->pid == pid)
+    {
+      p->pid = proc->pid;
+      if (proc->parent)
+      {
+        p->ppid = proc->parent->pid;
+      }
+      else
+      {
+        p->ppid = 0;
+      }
+      p->sz = proc->sz;
+      p->state = proc->state;
+      safestrcpy(p->name, proc->name, sizeof(proc->name));
+      release(&ptable.lock);
+      return 0;
+    }
+  }
 }
\ No newline at end of file
diff --git a/testvm.c b/testvm.c
index 51c701b..8308f39 100644
--- a/testvm.c
+++ b/testvm.c
@@ -11,7 +11,7 @@ int main(int argc, char *argv[])
     // write to the first byte of each page
     for (int i = 0; i < 5; i++)
     {
-        *(char *)(mem + i * 4096) = 'a' + i;
+        *(char *)(mem + i * 4096) = 'a';
     }
 
     // exit
diff --git a/user.h b/user.h
index f189a9a..23b7575 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,13 @@
 struct stat;
 struct rtcdate;
+// 7.1 add uproc structure to user.h
+struct uproc {
+    int pid;
+    int ppid;
+    int sz;
+    int state;
+    char name[16];
+};
 
 // system calls
 int fork(void);
@@ -31,6 +39,10 @@ int usedvp(void);
 int usedpp(void);
 // 6.3 add mmap(int) syscall declaration
 int mmap(int size);
+// 7.1 add  syscall declaration
+int getnumproc(void);
+int getmaxpid(void);
+int getprocinfo(int pid, struct uproc* info);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 65c3fe7..8263457 100644
--- a/usys.S
+++ b/usys.S
@@ -36,4 +36,8 @@ SYSCALL(getppid)
 SYSCALL(usedvp)
 SYSCALL(usedpp)
 // 6.3 add syscall extern declaration
-SYSCALL(mmap)
\ No newline at end of file
+SYSCALL(mmap)
+// 7.1 add syscall extern declaration
+SYSCALL(getnumproc)
+SYSCALL(getmaxpid)
+SYSCALL(getprocinfo)
\ No newline at end of file
diff --git a/vm.c b/vm.c
index c3399ea..d788e36 100644
--- a/vm.c
+++ b/vm.c
@@ -227,7 +227,7 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
   uint a;
 
   if(newsz >= KERNBASE)
-    return 0;
+    return 0; 
   if(newsz < oldsz)
     return oldsz;
 
@@ -402,14 +402,14 @@ void vmprint(pde_t *pgdir) {
   for (int i = 0; i < 512; i++) 
     if (pgdir[i] & PTE_P) { 
       uint pa = PTE_ADDR(pgdir[i]);
-      cprintf(".. %d: pde %p pa %p\n", i, PGROUNDDOWN(pgdir[i]), pa);
+      cprintf(".. %d: pde 0x%x pa 0x%x\n", i, PTE_ADDR(pgdir[i]), V2P(pa));
 
       pte_t* pt = (pte_t*)P2V(pa); 
       for (int j = 0; j < 1024; j++) {
           if (pt[j] & PTE_P) {
               uint pte_pa = PTE_ADDR(pt[j]);
-              cprintf(".. .. %d: pte %p pa %p\n", j, PGROUNDDOWN(pt[j]), pte_pa);
+              cprintf(".. .. %d: pte 0x%x pa 0x%x\n", j, PTE_ADDR(pt[j]), V2P(pte_pa));
           }
       }
-  }
+    }
 }
\ No newline at end of file
