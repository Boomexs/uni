diff --git a/adapter/pom.xml b/adapter/pom.xml
index e37a7d7..ee978ad 100644
--- a/adapter/pom.xml
+++ b/adapter/pom.xml
@@ -25,7 +25,7 @@
 			<!-- needs extra dependencies: objenesis & hamcrest -->
 			<groupId>org.mockito</groupId>
 			<artifactId>mockito-core</artifactId>
-			<version>1.9.0-rc1</version>
+			<version>3.2.4</version>
 			<scope>test</scope>
 		</dependency>
 
@@ -39,8 +39,8 @@
 				<artifactId>maven-compiler-plugin</artifactId>
 				<version>2.3.2</version>
 				<configuration>
-					<source>1.6</source>
-					<target>1.6</target>
+					<source>1.8</source>
+					<target>1.8</target>
 				</configuration>
 			</plugin>
 
diff --git a/adapter/src/main/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorAdapter.java b/adapter/src/main/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorAdapter.java
new file mode 100644
index 0000000..6ede069
--- /dev/null
+++ b/adapter/src/main/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorAdapter.java
@@ -0,0 +1,63 @@
+package eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty;
+
+import eu.jpereira.trainings.designpatterns.structural.adapter.model.Door;
+import eu.jpereira.trainings.designpatterns.structural.adapter.exceptions.CodeMismatchException;
+import eu.jpereira.trainings.designpatterns.structural.adapter.exceptions.IncorrectDoorCodeException;
+import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotChangeCodeForUnlockedDoor;
+import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotChangeStateOfLockedDoor;
+import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotUnlockDoorException;
+
+// rwlodarczyk: this class has been added to implement Door interface via ThirdPartyDoor, passes ThirdPartyAdapterTest
+
+public class ThirdPartyDoorAdapter extends ThirdPartyDoor implements Door {
+
+    @Override
+    public void open(String code) throws IncorrectDoorCodeException {
+        try {
+            unlock(code);
+            setState(DoorState.OPEN);
+        } catch (CannotUnlockDoorException | CannotChangeStateOfLockedDoor e) {
+            throw new IncorrectDoorCodeException();
+        }
+    }
+
+    @Override
+    public void close() {
+        try {
+            setState(DoorState.CLOSED);
+            lock();
+        } catch (CannotChangeStateOfLockedDoor e) {
+            throw new RuntimeException("Unexpected error closing the door", e);
+        }
+    }
+
+    @Override
+    public boolean isOpen() {
+        return getState() == DoorState.OPEN;
+    }
+
+    @Override
+    public void changeCode(String oldCode, String newCode, String newCodeConfirmation)
+            throws IncorrectDoorCodeException, CodeMismatchException {
+        if (!newCode.equals(newCodeConfirmation)) {
+            throw new CodeMismatchException();
+        }
+        try {
+            unlock(oldCode);
+            setNewLockCode(newCode);
+        } catch (CannotUnlockDoorException | CannotChangeCodeForUnlockedDoor e) {
+            throw new IncorrectDoorCodeException();
+        }
+    }
+
+    @Override
+    public boolean testCode(String code) {
+        try {
+            unlock(code);
+            lock();
+            return true;
+        } catch (CannotUnlockDoorException e) {
+            return false;
+        }
+    }
+}
diff --git a/adapter/src/main/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorObjectAdapter.java b/adapter/src/main/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorObjectAdapter.java
new file mode 100644
index 0000000..1b37ff4
--- /dev/null
+++ b/adapter/src/main/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorObjectAdapter.java
@@ -0,0 +1,69 @@
+package eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty;
+
+import eu.jpereira.trainings.designpatterns.structural.adapter.exceptions.CodeMismatchException;
+import eu.jpereira.trainings.designpatterns.structural.adapter.exceptions.IncorrectDoorCodeException;
+import eu.jpereira.trainings.designpatterns.structural.adapter.model.Door;
+import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.ThirdPartyDoor.DoorState;
+import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotChangeCodeForUnlockedDoor;
+import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotChangeStateOfLockedDoor;
+import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotUnlockDoorException;
+
+// rwlodarczyk: this class has been added to implement Door interface, passes ThirdPartyDoorObjectTest
+
+public class ThirdPartyDoorObjectAdapter implements Door {
+
+    private ThirdPartyDoor adaptee;
+
+    public ThirdPartyDoorObjectAdapter() {
+        this.adaptee = new ThirdPartyDoor();
+    }
+
+    @Override
+    public void open(String code) throws IncorrectDoorCodeException {
+        try {
+            this.adaptee.unlock(code);
+            this.adaptee.setState(DoorState.OPEN);
+        } catch (CannotUnlockDoorException | CannotChangeStateOfLockedDoor e) {
+            throw new IncorrectDoorCodeException();
+        }
+    }
+
+    @Override
+    public void close() {
+        try {
+            this.adaptee.setState(DoorState.CLOSED);
+            this.adaptee.lock();
+        } catch (CannotChangeStateOfLockedDoor e) {
+            throw new RuntimeException("Unexpected error closing the door", e);
+        }
+    }
+
+    @Override
+    public boolean isOpen() {
+        return this.adaptee.getState() == DoorState.OPEN;
+    }
+
+    @Override
+    public void changeCode(String oldCode, String newCode, String newCodeConfirmation) throws CodeMismatchException, IncorrectDoorCodeException {
+        if (!newCode.equals(newCodeConfirmation)) {
+            throw new CodeMismatchException();
+        }
+        try {
+            this.adaptee.unlock(oldCode);
+            this.adaptee.setNewLockCode(newCode);
+        } catch (CannotUnlockDoorException | CannotChangeCodeForUnlockedDoor e) {
+            throw new IncorrectDoorCodeException();
+        }
+    }
+
+    @Override
+    public boolean testCode(String code) {
+        try {
+            this.adaptee.unlock(code);
+            this.adaptee.lock();
+            return true;
+        } catch (CannotUnlockDoorException e) {
+            return false;
+        }
+    }
+}
diff --git a/adapter/src/test/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyAdapterTest.java b/adapter/src/test/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyAdapterTest.java
index 0899f3c..feb75e8 100644
--- a/adapter/src/test/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyAdapterTest.java
+++ b/adapter/src/test/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyAdapterTest.java
@@ -15,10 +15,10 @@
  */
 package eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty;
 
-import static org.junit.Assert.*;
 import eu.jpereira.trainings.designpatterns.structural.adapter.DoorTest;
 import eu.jpereira.trainings.designpatterns.structural.adapter.model.Door;
-import eu.jpereira.trainings.designpatterns.structural.adapter.model.SimpleDoor;
+
+// rwlodarczyk: modified the test to use ThirdPartyDoorAdapter
 
 /**
  * @author windows
@@ -26,17 +26,14 @@ import eu.jpereira.trainings.designpatterns.structural.adapter.model.SimpleDoor;
  */
 public class ThirdPartyAdapterTest extends DoorTest {
 
-
 	@Override
 	protected Door createDoorUnderTest() {
-		return new SimpleDoor();
-		//return new ThirdPartyDoorAdaper();
+		return new ThirdPartyDoorAdapter();
 	}
 
 	@Override
 	protected String getDefaultDoorCode() {
-		return SimpleDoor.DEFAULT_DOOR_CODE;
-		//return ThirdPartyDoor.DEFAULT_CODE;
+		return ThirdPartyDoor.DEFAULT_CODE;
 	}
 
 }
diff --git a/adapter/src/test/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorObjectAdapterTest.java b/adapter/src/test/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorObjectAdapterTest.java
index e87107f..14bac86 100644
--- a/adapter/src/test/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorObjectAdapterTest.java
+++ b/adapter/src/test/java/eu/jpereira/trainings/designpatterns/structural/adapter/thirdparty/ThirdPartyDoorObjectAdapterTest.java
@@ -17,22 +17,21 @@ package eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty;
 
 import eu.jpereira.trainings.designpatterns.structural.adapter.DoorTest;
 import eu.jpereira.trainings.designpatterns.structural.adapter.model.Door;
-import eu.jpereira.trainings.designpatterns.structural.adapter.model.SimpleDoor;
+
+// rwlodarczyk: modified the test to use ThirdPartyDoorObjectAdapter
 
 /**
  * @author windows
  *
  */
-public class ThirdPartyDoorObjectAdapterTest extends DoorTest{
+public class ThirdPartyDoorObjectAdapterTest extends DoorTest {
 	@Override
 	protected Door createDoorUnderTest() {
-		return new SimpleDoor();
-		//return new ThirdPartyDoorObjectAdapter();
+		return new ThirdPartyDoorObjectAdapter();
 	}
 
 	@Override
 	protected String getDefaultDoorCode() {
-		return SimpleDoor.DEFAULT_DOOR_CODE;
-		//return ThirdPartyDoor.DEFAULT_CODE;
+		return ThirdPartyDoor.DEFAULT_CODE;
 	}
 }
