diff --git a/factorymethod/pom.xml b/factorymethod/pom.xml
index fe1ce98..3677512 100644
--- a/factorymethod/pom.xml
+++ b/factorymethod/pom.xml
@@ -32,8 +32,8 @@
 				<artifactId>maven-compiler-plugin</artifactId>
 				<version>2.3.2</version>
 				<configuration>
-					<source>1.6</source>
-					<target>1.6</target>
+					<source>1.8</source>
+					<target>1.8</target>
 				</configuration>
 			</plugin>
 
diff --git a/factorymethod/src/main/java/eu/jpereira/trainings/designpatterns/creational/factorymethod/ReportFactory.java b/factorymethod/src/main/java/eu/jpereira/trainings/designpatterns/creational/factorymethod/ReportFactory.java
new file mode 100644
index 0000000..ea41bf1
--- /dev/null
+++ b/factorymethod/src/main/java/eu/jpereira/trainings/designpatterns/creational/factorymethod/ReportFactory.java
@@ -0,0 +1,38 @@
+package eu.jpereira.trainings.designpatterns.creational.factorymethod;
+
+import java.util.HashMap;
+import java.util.Map;
+
+// rwlodarczyk: Create ReportFactory interface and its implementations
+
+interface ReportFactory {
+    Report createReport();
+}
+
+class JSONReportFactory implements ReportFactory {
+    @Override
+    public Report createReport() {
+        return new JSONReport();
+    }
+}
+
+class XMLReportFactory implements ReportFactory {
+    @Override
+    public Report createReport() {
+        return new XMLReport();
+    }
+}
+
+class HTMLReportFactory implements ReportFactory {
+    @Override
+    public Report createReport() {
+        return new HTMLReport();
+    }
+}
+
+class PDFReportFactory implements ReportFactory {
+    @Override
+    public Report createReport() {
+        return new PDFReport();
+    }
+}
\ No newline at end of file
diff --git a/factorymethod/src/main/java/eu/jpereira/trainings/designpatterns/creational/factorymethod/ReportGenerator.java b/factorymethod/src/main/java/eu/jpereira/trainings/designpatterns/creational/factorymethod/ReportGenerator.java
index 7ef1897..5fefbd5 100644
--- a/factorymethod/src/main/java/eu/jpereira/trainings/designpatterns/creational/factorymethod/ReportGenerator.java
+++ b/factorymethod/src/main/java/eu/jpereira/trainings/designpatterns/creational/factorymethod/ReportGenerator.java
@@ -15,36 +15,34 @@
  */
 package eu.jpereira.trainings.designpatterns.creational.factorymethod;
 
+import java.util.Map;
+import java.util.HashMap;
+
 /**
  * The Report Generator will create reports based on a given type
+ * 
  * @author jpereira
  *
  */
 public class ReportGenerator {
+	private final Map<String, ReportFactory> factoryMap;
 
-	/**
-	 * Generate a new report.
-	 * @param data The report data
-	 * @param type the type of report
-	 * @return the generated report, or null of type is unknown
-	 */
-	public Report generateReport(ReportData data, String type) {
-
-		Report generatedReport = null;
+	public ReportGenerator() {
+		factoryMap = new HashMap<>();
+		factoryMap.put("JSON", new JSONReportFactory());
+		factoryMap.put("XML", new XMLReportFactory());
+		factoryMap.put("HTML", new HTMLReportFactory());
+		factoryMap.put("PDF", new PDFReportFactory());
+	}
 
-		if (type.equals("JSON")) {
-			generatedReport = new JSONReport();
-		} else if (type.equals("XML")) {
-			generatedReport = new XMLReport();
-		} else if (type.equals("HTML")) {
-			generatedReport = new HTMLReport();
-		} else if (type.equals("PDF")) {
-			generatedReport = new PDFReport();
-		}
-		if (generatedReport != null) {
-			generatedReport.generateReport(data);
+	public Report generateReport(ReportData data, String type) {
+		ReportFactory factory = factoryMap.get(type);
+		if (factory == null) {
+			return null;
 		}
 
-		return generatedReport;
+		Report report = factory.createReport();
+		report.generateReport(data);
+		return report;
 	}
 }
