@startuml
title LibraryAPI
namespace main {
    class Book << (S,Aquamarine) >> {
        + ID int
        + Title string
        + Author string

    }
    class BookCopy << (S,Aquamarine) >> {
        + ID int
        + BookID int
        + ReaderID int

    }
    interface BookStorage  {
        + CreateBook(book *Book) error
        + DeleteBook(id int) error
        + AddCopy(bookID int) (int, error)
        + DeleteCopy(id int) error
        + GetBooks() ([]*Book, error)
        + GetBook(id int) (*Book, error)

    }
    class InMemoryBookStorage << (S,Aquamarine) >> {
        - books <font color=blue>map</font>[int]*Book
        - copies <font color=blue>map</font>[int]*BookCopy
        - nextID int
        - copyID int
        - mu sync.Mutex

        + CreateBook(book *Book) error
        + DeleteBook(id int) error
        + AddCopy(bookID int) (int, error)
        + DeleteCopy(id int) error
        + GetBooks() ([]*Book, error)
        + GetBook(id int) (*Book, error)

    }
    class InMemoryReaderStorage << (S,Aquamarine) >> {
        - readers <font color=blue>map</font>[int]*Reader
        - nextID int
        - mu sync.Mutex

        + GetReaders() ([]*Reader, error)
        + GetReader(id int) (*Reader, error)
        + CreateReader(reader *Reader) error
        + DeleteReader(id int) error

    }
    class InMemoryStorage << (S,Aquamarine) >> {
        - bookStorage *InMemoryBookStorage
        - readerStorage *InMemoryReaderStorage

    }
    interface LibraryService  {
        + BorrowBook(bookID int, readerID int) error
        + ReturnBook(bookID int, readerID int) error
        + CreateBook(book *Book) error
        + DeleteBook(id int) error
        + AddCopy(bookID int) (int, error)
        + DeleteCopy(id int) error
        + GetBooks() ([]*Book, error)
        + GetBook(id int) (*Book, error)
        + GetReaders() ([]*Reader, error)
        + GetReader(id int) (*Reader, error)
        + CreateReader(reader *Reader) error
        + DeleteReader(id int) error

    }
    class Reader << (S,Aquamarine) >> {
        + ID int
        + Name string
        + Surname string

    }
    interface ReaderStorage  {
        + CreateReader(reader *Reader) error
        + DeleteReader(id int) error
        + GetReaders() ([]*Reader, error)
        + GetReader(id int) (*Reader, error)

    }
    class Service << (S,Aquamarine) >> {
        - storage *InMemoryStorage

        + BorrowBook(bookID int, readerID int) error
        + ReturnBook(bookID int, readerID int) error
        + CreateBook(book *Book) error
        + DeleteBook(id int) error
        + AddCopy(bookID int) (int, error)
        + DeleteCopy(id int) error
        + GetBooks() ([]*Book, error)
        + GetBook(id int) (*Book, error)
        + GetReaders() ([]*Reader, error)
        + GetReader(id int) (*Reader, error)
        + CreateReader(reader *Reader) error
        + DeleteReader(id int) error

    }
}

"main.BookStorage" <|-- "main.InMemoryBookStorage"
"main.ReaderStorage" <|-- "main.InMemoryReaderStorage"
"main.BookStorage" <|-- "main.Service"
"main.LibraryService" <|-- "main.Service"
"main.ReaderStorage" <|-- "main.Service"

@enduml
