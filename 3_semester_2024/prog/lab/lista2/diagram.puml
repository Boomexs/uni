@startuml diagram

package "LibrarySystem" {

    package "Domain" {
        class Book {
            - ID: int
            - Title: string
            - Author: string
        }

        class BookCopy {
            - CopyID: int
            - BookID: int
            - ReaderID: int 0 if not borrowed
        }

        class Reader {
            - ReaderID: int
            - Name: string
            - Surname: string
        }

    }

    package "Storage" {
        interface BookStorage {
           	+ GetBooks() ([]*Book, error)
	        + GetBook(id int) (*Book, error)
            + CreateBook(book *Book) error
            + DeleteBook(id int) error
            + GetCopies() ([]*BookCopy, error)
            + GetCopy(id int) (*BookCopy, error)
            + CreateCopy(bookID int) (int, error)
            + UpdateCopy(id int, readerID int) error
            + DeleteCopy(id int) error
        }

        interface ReaderStorage {
            + CreateReader(reader *Reader) error
            + DeleteReader(id int) error
            + GetReaders() ([]*Reader, error)
            + GetReader(id int) (*Reader, error)
        }

        interface LibraryStorage {
            + BookStorage
            + ReaderStorage
        }

        class InMemoryStorage {
            - InMemoryBookStorage: InMemoryBookStorage
            - InMemoryReaderStorage: InMemoryReaderStorage
            + NewInMemoryStorage(): *InMemoryStorage
        }

        class InMemoryBookStorage {
            - books: map[int]*Book
            - copies: map[int]*BookCopy
            - nextID: int
            - copyID: int
            - mu: sync.Mutex
        }

        class InMemoryReaderStorage {
            - readers: map[int]*Reader
            - nextID: int
            - mu: sync.Mutex
        }
    }

    package "API" {
        class HTTPServer {
            HTTPServer is an API Server to interact with the Library
            - service: LibraryService
            - storage: LibraryStorage
            + GetBooksHandler()
            + GetBookHandler()
            + CreateBookHandler()
            + DeleteBookHandler()
            + CreateCopyHandler()
            + GetAllCopiesHandler()
            + DeleteCopyHandler()
            + BorrowBookHandler()
            + ReturnBookHandler()
            + GetReadersHandler()
            + GetReaderHandler()
            + CreateReaderHandler()
            + DeleteReaderHandler()
        }
    }

    package "Services" {
        interface LibraryService {
            + GetCopiesByReader(readerID int) ([]*FullCopy, error)
            + BorrowBook(bookID int, readerID int) error
            + ReturnBook(bookID int, readerID int) error
        }

        class Service {
            - storage: InMemoryStorage
            + NewService(storage: InMemoryStorage): *Service
        }
    }

    LibraryStorage <|-- InMemoryStorage : "Implements"
    LibraryStorage <-- BookStorage : "Contains"
    LibraryStorage <-- ReaderStorage : "Contains"
    BookStorage <|-- InMemoryBookStorage : "Implements"
    ReaderStorage <|-- InMemoryReaderStorage : "Implements"
    HTTPServer --> LibraryService : "Uses for complex queries"
    HTTPServer --> LibraryStorage : "Uses for simple queries"
    Service --> LibraryStorage : "Uses"
    LibraryService <|-- Service : "Implements"
    InMemoryStorage --> InMemoryBookStorage : "Contains"
    InMemoryStorage --> InMemoryReaderStorage : "Contains"
    InMemoryBookStorage --> Book : "References"
    InMemoryReaderStorage --> Reader : "References"
    InMemoryBookStorage --> BookCopy : "References"
    BookCopy --> Book : "References"
    BookCopy --> Reader : "References"

}

@enduml
